#ifndef MAPSMANAGER_HPP
#define MAPSMANAGER_HPP
#include <SFML/Graphics.hpp>

class MapsManager
{
public:
    //Levels :
    std::vector<std::vector<int>> lvl1=
    {
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
        {0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
        {4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4},
        {7,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,4},
        {7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
    };
    //-------------------
    std::vector<std::vector<int>> lvl2 =
    {
        {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4},
        {4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4},
        {4,0,0,0,3,3,0,3,3,0,3,3,0,3,3,0,3,3,0,3,3,0,0,0,4},
        {4,0,0,0,0,0,3,0,0,3,0,0,0,3,0,0,3,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,3,0,0,0,0,3,0,3,0,0,0,0,3,0,0,0,0,0,0,4},
        {4,4,0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,4},
        {4,0,0,0,0,3,0,0,0,0,3,0,3,0,0,0,0,3,0,3,0,0,0,0,4},
        {4,0,0,0,0,0,3,0,0,3,0,0,0,3,0,0,3,0,0,0,3,0,0,0,4},
        {4,4,0,0,0,3,0,3,3,0,0,0,0,0,3,3,0,0,0,0,0,3,0,0,4},
        {4,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
        {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,4},
        {4,0,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,4},
        {4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4},
        {4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4},
    };
    //-------------------
    std::vector<std::vector<int>> lvl3 =
    {
        {12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12},
        {12,0,0,5,5,5,0,12,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,12},
        {12,0,0,5,0,5,0,12,0,0,0,0,13,0,0,0,0,12,0,0,0,0,0,0,12},
        {12,0,0,5,0,5,0,12,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,12,12},
        {12,0,0,5,12,5,0,12,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,0,12},
        {12,0,0,0,0,3,0,12,0,0,0,12,12,0,0,0,0,12,0,0,0,12,0,0,12},
        {12,14,0,0,0,0,3,12,0,0,0,0,12,0,0,0,16,12,12,0,0,0,0,0,12},
        {12,12,0,0,0,0,0,12,12,0,0,0,12,0,0,0,12,12,0,0,0,0,0,0,12},
        {12,0,0,0,0,0,0,12,0,0,0,12,12,0,0,0,0,12,0,0,0,12,0,0,12},
        {12,0,0,0,0,0,0,15,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,0,12},
        {12,12,0,0,0,0,12,12,12,0,0,0,12,0,0,0,0,12,0,0,0,0,0,12,12},
        {12,0,0,0,0,3,3,12,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12},
        {12,0,0,0,0,0,0,12,0,0,0,12,12,0,0,0,0,0,0,0,0,12,0,0,12},
        {12,12,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,0,12},
        {12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12},
        {12,0,0,0,12,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,12},
        {12,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12},
        {12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12},
        {12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12},
    };
    MapsManager();
    sf::Vector2f getStartingPosition(unsigned short Level);
    float getLevelSpeed(unsigned short Level);
    std::vector<std::vector<int>> GetLevel(unsigned short Level);
protected:

private:
    sf::Texture battext;
    sf::Sprite batSp;
};

#endif // MAPSMANAGER_HPP
